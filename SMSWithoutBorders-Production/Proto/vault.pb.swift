// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: vault.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for creating an entity.
struct Vault_V1_CreateEntityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ISO 3166-1 alpha-2 country code of the entity.
  var countryCode: String = String()

  /// The phone number of the entity.
  var phoneNumber: String = String()

  /// The password of the entity.
  var password: String = String()

  /// The client's public key for publishing.
  var clientPublishPubKey: String = String()

  /// The client's public key for device identification.
  var clientDeviceIDPubKey: String = String()

  /// The ownership proof response from the client.
  var ownershipProofResponse: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for creating an entity.
struct Vault_V1_CreateEntityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates if ownership proof is required.
  var requiresOwnershipProof: Bool = false

  /// A long-lived token for the authenticated entity.
  var longLivedToken: String = String()

  /// The server's public key for publishing.
  var serverPublishPubKey: String = String()

  /// The server's public key for device identification.
  var serverDeviceIDPubKey: String = String()

  /// A response message.
  var message: String = String()

  /// The next available time to request another proof of ownership.
  var nextAttemptTimestamp: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for authenticating an entity.
struct Vault_V1_AuthenticateEntityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The phone number of the entity.
  var phoneNumber: String = String()

  /// The password of the entity.
  var password: String = String()

  /// The client's public key for publishing.
  var clientPublishPubKey: String = String()

  /// The client's public key for device identification.
  var clientDeviceIDPubKey: String = String()

  /// The ownership proof response from the client.
  var ownershipProofResponse: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for authenticating an entity.
struct Vault_V1_AuthenticateEntityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates if ownership proof is required.
  var requiresOwnershipProof: Bool = false

  /// A long-lived token for the authenticated entity.
  var longLivedToken: String = String()

  /// The server's public key for publishing.
  var serverPublishPubKey: String = String()

  /// The server's public key for device identification.
  var serverDeviceIDPubKey: String = String()

  /// A response message.
  var message: String = String()

  /// The next available time to request another proof of ownership.
  var nextAttemptTimestamp: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for listing entity's stored tokens.
struct Vault_V1_ListEntityStoredTokensRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The long-lived token of the authenticated entity.
  var longLivedToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for listing entity's stored tokens.
struct Vault_V1_ListEntityStoredTokensResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of stored tokens.
  var storedTokens: [Vault_V1_Token] = []

  /// A response message.
  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Represents a token.
struct Vault_V1_Token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The platform associated with the token.
  var platform: String = String()

  /// The unique identifier of the account associated with the token.
  var accountIdentifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for storing an entity's token.
struct Vault_V1_StoreEntityTokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The long-lived token of the authenticated entity.
  var longLivedToken: String = String()

  /// The OAuth2 token to be stored (JSON string).
  var token: String = String()

  /// The platform associated with the token.
  var platform: String = String()

  /// The identifier of the account associated with the token.
  var accountIdentifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for storing an entity's token.
struct Vault_V1_StoreEntityTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A response message.
  var message: String = String()

  /// Indicates whether the operation was successful.
  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for getting entity access token.
struct Vault_V1_GetEntityAccessTokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Device ID for identifying the requesting device.
  var deviceID: String = String()

  /// The long-lived token of the authenticated entity.
  var longLivedToken: String = String()

  /// The platform associated with the token.
  var platform: String = String()

  /// The identifier of the account associated with the token.
  var accountIdentifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for getting entity access token.
struct Vault_V1_GetEntityAccessTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Entity access token (JSON string).
  var token: String = String()

  /// A response message.
  var message: String = String()

  /// Indicates whether the operation was successful.
  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for decrypting payload.
struct Vault_V1_DecryptPayloadRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Device ID for identifying the requesting device.
  var deviceID: String = String()

  /// Encrypted payload that needs to be decrypted.
  var payloadCiphertext: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Vault_V1_DecryptPayloadResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Decrypted plaintext payload.
  var payloadPlaintext: String = String()

  /// A response message.
  var message: String = String()

  /// Indicates whether the operation was successful.
  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for encrypting payload.
struct Vault_V1_EncryptPayloadRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Device ID for identifying the requesting device.
  var deviceID: String = String()

  /// Plaintext payload to be encrypted.
  var payloadPlaintext: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for encrypting payload.
struct Vault_V1_EncryptPayloadResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Encrypted payload.
  var payloadCiphertext: String = String()

  /// A response message.
  var message: String = String()

  /// Indicates whether the operation was successful.
  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for updating an entity's token.
struct Vault_V1_UpdateEntityTokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Device ID for identifying the requesting device.
  var deviceID: String = String()

  /// The OAuth2 token to be stored (JSON string).
  var token: String = String()

  /// The platform associated with the token.
  var platform: String = String()

  /// The identifier of the account associated with the token.
  var accountIdentifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for updating an entity's token.
struct Vault_V1_UpdateEntityTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A response message.
  var message: String = String()

  /// Indicates whether the operation was successful.
  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for deleting an entity's token.
struct Vault_V1_DeleteEntityTokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The long-lived token of the authenticated entity.
  var longLivedToken: String = String()

  /// The platform associated with the token.
  var platform: String = String()

  /// The identifier of the account associated with the token.
  var accountIdentifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for deleting an entity's token.
struct Vault_V1_DeleteEntityTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A response message.
  var message: String = String()

  /// Indicates whether the operation was successful.
  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for deleting an entity.
struct Vault_V1_DeleteEntityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The long-lived token of the authenticated entity.
  var longLivedToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for deleting an entity.
struct Vault_V1_DeleteEntityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A response message.
  var message: String = String()

  /// Indicates whether the operation was successful.
  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for resetting an entity's password.
struct Vault_V1_ResetPasswordRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The phone number of the entity.
  var phoneNumber: String = String()

  /// The new password of the entity.
  var newPassword: String = String()

  /// The client's public key for publishing.
  var clientPublishPubKey: String = String()

  /// The client's public key for device identification.
  var clientDeviceIDPubKey: String = String()

  /// The ownership proof response from the client.
  var ownershipProofResponse: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for resetting an entity's password.
struct Vault_V1_ResetPasswordResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates if ownership proof is required.
  var requiresOwnershipProof: Bool = false

  /// A long-lived token for the authenticated entity.
  var longLivedToken: String = String()

  /// The server's public key for publishing.
  var serverPublishPubKey: String = String()

  /// The server's public key for device identification.
  var serverDeviceIDPubKey: String = String()

  /// A response message.
  var message: String = String()

  /// The next available time to request another proof of ownership.
  var nextAttemptTimestamp: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request message for updating an entity's password.
struct Vault_V1_UpdateEntityPasswordRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The long-lived token of the authenticated entity.
  var longLivedToken: String = String()

  /// The current password of the entity.
  var currentPassword: String = String()

  /// The new password of the entity.
  var newPassword: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response message for updating an entity's password.
struct Vault_V1_UpdateEntityPasswordResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A response message.
  var message: String = String()

  /// Indicates whether the operation was successful.
  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Vault_V1_CreateEntityRequest: @unchecked Sendable {}
extension Vault_V1_CreateEntityResponse: @unchecked Sendable {}
extension Vault_V1_AuthenticateEntityRequest: @unchecked Sendable {}
extension Vault_V1_AuthenticateEntityResponse: @unchecked Sendable {}
extension Vault_V1_ListEntityStoredTokensRequest: @unchecked Sendable {}
extension Vault_V1_ListEntityStoredTokensResponse: @unchecked Sendable {}
extension Vault_V1_Token: @unchecked Sendable {}
extension Vault_V1_StoreEntityTokenRequest: @unchecked Sendable {}
extension Vault_V1_StoreEntityTokenResponse: @unchecked Sendable {}
extension Vault_V1_GetEntityAccessTokenRequest: @unchecked Sendable {}
extension Vault_V1_GetEntityAccessTokenResponse: @unchecked Sendable {}
extension Vault_V1_DecryptPayloadRequest: @unchecked Sendable {}
extension Vault_V1_DecryptPayloadResponse: @unchecked Sendable {}
extension Vault_V1_EncryptPayloadRequest: @unchecked Sendable {}
extension Vault_V1_EncryptPayloadResponse: @unchecked Sendable {}
extension Vault_V1_UpdateEntityTokenRequest: @unchecked Sendable {}
extension Vault_V1_UpdateEntityTokenResponse: @unchecked Sendable {}
extension Vault_V1_DeleteEntityTokenRequest: @unchecked Sendable {}
extension Vault_V1_DeleteEntityTokenResponse: @unchecked Sendable {}
extension Vault_V1_DeleteEntityRequest: @unchecked Sendable {}
extension Vault_V1_DeleteEntityResponse: @unchecked Sendable {}
extension Vault_V1_ResetPasswordRequest: @unchecked Sendable {}
extension Vault_V1_ResetPasswordResponse: @unchecked Sendable {}
extension Vault_V1_UpdateEntityPasswordRequest: @unchecked Sendable {}
extension Vault_V1_UpdateEntityPasswordResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "vault.v1"

extension Vault_V1_CreateEntityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateEntityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "country_code"),
    2: .standard(proto: "phone_number"),
    3: .same(proto: "password"),
    4: .standard(proto: "client_publish_pub_key"),
    5: .standard(proto: "client_device_id_pub_key"),
    6: .standard(proto: "ownership_proof_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.countryCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientPublishPubKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.clientDeviceIDPubKey) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.ownershipProofResponse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.countryCode.isEmpty {
      try visitor.visitSingularStringField(value: self.countryCode, fieldNumber: 1)
    }
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    if !self.clientPublishPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.clientPublishPubKey, fieldNumber: 4)
    }
    if !self.clientDeviceIDPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.clientDeviceIDPubKey, fieldNumber: 5)
    }
    if !self.ownershipProofResponse.isEmpty {
      try visitor.visitSingularStringField(value: self.ownershipProofResponse, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_CreateEntityRequest, rhs: Vault_V1_CreateEntityRequest) -> Bool {
    if lhs.countryCode != rhs.countryCode {return false}
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.password != rhs.password {return false}
    if lhs.clientPublishPubKey != rhs.clientPublishPubKey {return false}
    if lhs.clientDeviceIDPubKey != rhs.clientDeviceIDPubKey {return false}
    if lhs.ownershipProofResponse != rhs.ownershipProofResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_CreateEntityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateEntityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requires_ownership_proof"),
    2: .standard(proto: "long_lived_token"),
    3: .standard(proto: "server_publish_pub_key"),
    4: .standard(proto: "server_device_id_pub_key"),
    5: .same(proto: "message"),
    6: .standard(proto: "next_attempt_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.requiresOwnershipProof) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.serverPublishPubKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serverDeviceIDPubKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.nextAttemptTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requiresOwnershipProof != false {
      try visitor.visitSingularBoolField(value: self.requiresOwnershipProof, fieldNumber: 1)
    }
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 2)
    }
    if !self.serverPublishPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverPublishPubKey, fieldNumber: 3)
    }
    if !self.serverDeviceIDPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverDeviceIDPubKey, fieldNumber: 4)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 5)
    }
    if self.nextAttemptTimestamp != 0 {
      try visitor.visitSingularInt32Field(value: self.nextAttemptTimestamp, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_CreateEntityResponse, rhs: Vault_V1_CreateEntityResponse) -> Bool {
    if lhs.requiresOwnershipProof != rhs.requiresOwnershipProof {return false}
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.serverPublishPubKey != rhs.serverPublishPubKey {return false}
    if lhs.serverDeviceIDPubKey != rhs.serverDeviceIDPubKey {return false}
    if lhs.message != rhs.message {return false}
    if lhs.nextAttemptTimestamp != rhs.nextAttemptTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_AuthenticateEntityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthenticateEntityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "phone_number"),
    2: .same(proto: "password"),
    3: .standard(proto: "client_publish_pub_key"),
    4: .standard(proto: "client_device_id_pub_key"),
    5: .standard(proto: "ownership_proof_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clientPublishPubKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientDeviceIDPubKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ownershipProofResponse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    if !self.clientPublishPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.clientPublishPubKey, fieldNumber: 3)
    }
    if !self.clientDeviceIDPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.clientDeviceIDPubKey, fieldNumber: 4)
    }
    if !self.ownershipProofResponse.isEmpty {
      try visitor.visitSingularStringField(value: self.ownershipProofResponse, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_AuthenticateEntityRequest, rhs: Vault_V1_AuthenticateEntityRequest) -> Bool {
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.password != rhs.password {return false}
    if lhs.clientPublishPubKey != rhs.clientPublishPubKey {return false}
    if lhs.clientDeviceIDPubKey != rhs.clientDeviceIDPubKey {return false}
    if lhs.ownershipProofResponse != rhs.ownershipProofResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_AuthenticateEntityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthenticateEntityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requires_ownership_proof"),
    2: .standard(proto: "long_lived_token"),
    3: .standard(proto: "server_publish_pub_key"),
    4: .standard(proto: "server_device_id_pub_key"),
    5: .same(proto: "message"),
    6: .standard(proto: "next_attempt_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.requiresOwnershipProof) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.serverPublishPubKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serverDeviceIDPubKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.nextAttemptTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requiresOwnershipProof != false {
      try visitor.visitSingularBoolField(value: self.requiresOwnershipProof, fieldNumber: 1)
    }
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 2)
    }
    if !self.serverPublishPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverPublishPubKey, fieldNumber: 3)
    }
    if !self.serverDeviceIDPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverDeviceIDPubKey, fieldNumber: 4)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 5)
    }
    if self.nextAttemptTimestamp != 0 {
      try visitor.visitSingularInt32Field(value: self.nextAttemptTimestamp, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_AuthenticateEntityResponse, rhs: Vault_V1_AuthenticateEntityResponse) -> Bool {
    if lhs.requiresOwnershipProof != rhs.requiresOwnershipProof {return false}
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.serverPublishPubKey != rhs.serverPublishPubKey {return false}
    if lhs.serverDeviceIDPubKey != rhs.serverDeviceIDPubKey {return false}
    if lhs.message != rhs.message {return false}
    if lhs.nextAttemptTimestamp != rhs.nextAttemptTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_ListEntityStoredTokensRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListEntityStoredTokensRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "long_lived_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_ListEntityStoredTokensRequest, rhs: Vault_V1_ListEntityStoredTokensRequest) -> Bool {
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_ListEntityStoredTokensResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListEntityStoredTokensResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stored_tokens"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.storedTokens) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.storedTokens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.storedTokens, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_ListEntityStoredTokensResponse, rhs: Vault_V1_ListEntityStoredTokensResponse) -> Bool {
    if lhs.storedTokens != rhs.storedTokens {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platform"),
    2: .standard(proto: "account_identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.accountIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 1)
    }
    if !self.accountIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.accountIdentifier, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_Token, rhs: Vault_V1_Token) -> Bool {
    if lhs.platform != rhs.platform {return false}
    if lhs.accountIdentifier != rhs.accountIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_StoreEntityTokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoreEntityTokenRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "long_lived_token"),
    2: .same(proto: "token"),
    3: .same(proto: "platform"),
    4: .standard(proto: "account_identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.accountIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if !self.accountIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.accountIdentifier, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_StoreEntityTokenRequest, rhs: Vault_V1_StoreEntityTokenRequest) -> Bool {
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.token != rhs.token {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.accountIdentifier != rhs.accountIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_StoreEntityTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoreEntityTokenResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_StoreEntityTokenResponse, rhs: Vault_V1_StoreEntityTokenResponse) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_GetEntityAccessTokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEntityAccessTokenRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .standard(proto: "long_lived_token"),
    3: .same(proto: "platform"),
    4: .standard(proto: "account_identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.accountIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if !self.accountIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.accountIdentifier, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_GetEntityAccessTokenRequest, rhs: Vault_V1_GetEntityAccessTokenRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.accountIdentifier != rhs.accountIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_GetEntityAccessTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEntityAccessTokenResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "message"),
    3: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_GetEntityAccessTokenResponse, rhs: Vault_V1_GetEntityAccessTokenResponse) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.message != rhs.message {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_DecryptPayloadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DecryptPayloadRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .standard(proto: "payload_ciphertext"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.payloadCiphertext) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.payloadCiphertext.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadCiphertext, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_DecryptPayloadRequest, rhs: Vault_V1_DecryptPayloadRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.payloadCiphertext != rhs.payloadCiphertext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_DecryptPayloadResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DecryptPayloadResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "payload_plaintext"),
    2: .same(proto: "message"),
    3: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.payloadPlaintext) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payloadPlaintext.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadPlaintext, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_DecryptPayloadResponse, rhs: Vault_V1_DecryptPayloadResponse) -> Bool {
    if lhs.payloadPlaintext != rhs.payloadPlaintext {return false}
    if lhs.message != rhs.message {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_EncryptPayloadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EncryptPayloadRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .standard(proto: "payload_plaintext"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.payloadPlaintext) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.payloadPlaintext.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadPlaintext, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_EncryptPayloadRequest, rhs: Vault_V1_EncryptPayloadRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.payloadPlaintext != rhs.payloadPlaintext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_EncryptPayloadResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EncryptPayloadResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "payload_ciphertext"),
    2: .same(proto: "message"),
    3: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.payloadCiphertext) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payloadCiphertext.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadCiphertext, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_EncryptPayloadResponse, rhs: Vault_V1_EncryptPayloadResponse) -> Bool {
    if lhs.payloadCiphertext != rhs.payloadCiphertext {return false}
    if lhs.message != rhs.message {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_UpdateEntityTokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateEntityTokenRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .same(proto: "token"),
    3: .same(proto: "platform"),
    4: .standard(proto: "account_identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.accountIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if !self.accountIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.accountIdentifier, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_UpdateEntityTokenRequest, rhs: Vault_V1_UpdateEntityTokenRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.token != rhs.token {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.accountIdentifier != rhs.accountIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_UpdateEntityTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateEntityTokenResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_UpdateEntityTokenResponse, rhs: Vault_V1_UpdateEntityTokenResponse) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_DeleteEntityTokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteEntityTokenRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "long_lived_token"),
    2: .same(proto: "platform"),
    3: .standard(proto: "account_identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 1)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 2)
    }
    if !self.accountIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.accountIdentifier, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_DeleteEntityTokenRequest, rhs: Vault_V1_DeleteEntityTokenRequest) -> Bool {
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.accountIdentifier != rhs.accountIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_DeleteEntityTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteEntityTokenResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_DeleteEntityTokenResponse, rhs: Vault_V1_DeleteEntityTokenResponse) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_DeleteEntityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteEntityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "long_lived_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_DeleteEntityRequest, rhs: Vault_V1_DeleteEntityRequest) -> Bool {
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_DeleteEntityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteEntityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_DeleteEntityResponse, rhs: Vault_V1_DeleteEntityResponse) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_ResetPasswordRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResetPasswordRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "phone_number"),
    2: .standard(proto: "new_password"),
    3: .standard(proto: "client_publish_pub_key"),
    4: .standard(proto: "client_device_id_pub_key"),
    5: .standard(proto: "ownership_proof_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.newPassword) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clientPublishPubKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientDeviceIDPubKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ownershipProofResponse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 1)
    }
    if !self.newPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.newPassword, fieldNumber: 2)
    }
    if !self.clientPublishPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.clientPublishPubKey, fieldNumber: 3)
    }
    if !self.clientDeviceIDPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.clientDeviceIDPubKey, fieldNumber: 4)
    }
    if !self.ownershipProofResponse.isEmpty {
      try visitor.visitSingularStringField(value: self.ownershipProofResponse, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_ResetPasswordRequest, rhs: Vault_V1_ResetPasswordRequest) -> Bool {
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.newPassword != rhs.newPassword {return false}
    if lhs.clientPublishPubKey != rhs.clientPublishPubKey {return false}
    if lhs.clientDeviceIDPubKey != rhs.clientDeviceIDPubKey {return false}
    if lhs.ownershipProofResponse != rhs.ownershipProofResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_ResetPasswordResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResetPasswordResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requires_ownership_proof"),
    2: .standard(proto: "long_lived_token"),
    3: .standard(proto: "server_publish_pub_key"),
    4: .standard(proto: "server_device_id_pub_key"),
    5: .same(proto: "message"),
    6: .standard(proto: "next_attempt_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.requiresOwnershipProof) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.serverPublishPubKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serverDeviceIDPubKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.nextAttemptTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.requiresOwnershipProof != false {
      try visitor.visitSingularBoolField(value: self.requiresOwnershipProof, fieldNumber: 1)
    }
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 2)
    }
    if !self.serverPublishPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverPublishPubKey, fieldNumber: 3)
    }
    if !self.serverDeviceIDPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverDeviceIDPubKey, fieldNumber: 4)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 5)
    }
    if self.nextAttemptTimestamp != 0 {
      try visitor.visitSingularInt32Field(value: self.nextAttemptTimestamp, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_ResetPasswordResponse, rhs: Vault_V1_ResetPasswordResponse) -> Bool {
    if lhs.requiresOwnershipProof != rhs.requiresOwnershipProof {return false}
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.serverPublishPubKey != rhs.serverPublishPubKey {return false}
    if lhs.serverDeviceIDPubKey != rhs.serverDeviceIDPubKey {return false}
    if lhs.message != rhs.message {return false}
    if lhs.nextAttemptTimestamp != rhs.nextAttemptTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_UpdateEntityPasswordRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateEntityPasswordRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "long_lived_token"),
    2: .standard(proto: "current_password"),
    3: .standard(proto: "new_password"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.longLivedToken) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.currentPassword) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.newPassword) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.longLivedToken.isEmpty {
      try visitor.visitSingularStringField(value: self.longLivedToken, fieldNumber: 1)
    }
    if !self.currentPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.currentPassword, fieldNumber: 2)
    }
    if !self.newPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.newPassword, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_UpdateEntityPasswordRequest, rhs: Vault_V1_UpdateEntityPasswordRequest) -> Bool {
    if lhs.longLivedToken != rhs.longLivedToken {return false}
    if lhs.currentPassword != rhs.currentPassword {return false}
    if lhs.newPassword != rhs.newPassword {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Vault_V1_UpdateEntityPasswordResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateEntityPasswordResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Vault_V1_UpdateEntityPasswordResponse, rhs: Vault_V1_UpdateEntityPasswordResponse) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
