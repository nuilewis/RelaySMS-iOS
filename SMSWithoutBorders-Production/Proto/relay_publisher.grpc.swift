//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: relay_publisher.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service definition for Publisher
///
/// Usage: instantiate `Publisher_V1_PublisherClient`, then call methods of this protocol to make API calls.
internal protocol Publisher_V1_PublisherClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol? { get }

  func getOAuth2AuthorizationUrl(
    _ request: Publisher_V1_GetOAuth2AuthorizationUrlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Publisher_V1_GetOAuth2AuthorizationUrlRequest, Publisher_V1_GetOAuth2AuthorizationUrlResponse>

  func exchangeOAuth2CodeAndStore(
    _ request: Publisher_V1_ExchangeOAuth2CodeAndStoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Publisher_V1_ExchangeOAuth2CodeAndStoreRequest, Publisher_V1_ExchangeOAuth2CodeAndStoreResponse>

  func publishContent(
    _ request: Publisher_V1_PublishContentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Publisher_V1_PublishContentRequest, Publisher_V1_PublishContentResponse>

  func revokeAndDeleteOAuth2Token(
    _ request: Publisher_V1_RevokeAndDeleteOAuth2TokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Publisher_V1_RevokeAndDeleteOAuth2TokenRequest, Publisher_V1_RevokeAndDeleteOAuth2TokenResponse>

  func getPNBACode(
    _ request: Publisher_V1_GetPNBACodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Publisher_V1_GetPNBACodeRequest, Publisher_V1_GetPNBACodeResponse>

  func exchangePNBACodeAndStore(
    _ request: Publisher_V1_ExchangePNBACodeAndStoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Publisher_V1_ExchangePNBACodeAndStoreRequest, Publisher_V1_ExchangePNBACodeAndStoreResponse>

  func revokeAndDeletePNBAToken(
    _ request: Publisher_V1_RevokeAndDeletePNBATokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Publisher_V1_RevokeAndDeletePNBATokenRequest, Publisher_V1_RevokeAndDeletePNBATokenResponse>
}

extension Publisher_V1_PublisherClientProtocol {
  internal var serviceName: String {
    return "publisher.v1.Publisher"
  }

  /// RPC for getting the OAuth2 authorization URL
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOAuth2AuthorizationUrl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOAuth2AuthorizationUrl(
    _ request: Publisher_V1_GetOAuth2AuthorizationUrlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Publisher_V1_GetOAuth2AuthorizationUrlRequest, Publisher_V1_GetOAuth2AuthorizationUrlResponse> {
    return self.makeUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.getOAuth2AuthorizationUrl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOAuth2AuthorizationUrlInterceptors() ?? []
    )
  }

  /// RPC for exchanging OAuth2 authorization code for a token
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeOAuth2CodeAndStore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeOAuth2CodeAndStore(
    _ request: Publisher_V1_ExchangeOAuth2CodeAndStoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Publisher_V1_ExchangeOAuth2CodeAndStoreRequest, Publisher_V1_ExchangeOAuth2CodeAndStoreResponse> {
    return self.makeUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.exchangeOAuth2CodeAndStore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeOAuth2CodeAndStoreInterceptors() ?? []
    )
  }

  /// RPC for publishing content
  ///
  /// - Parameters:
  ///   - request: Request to send to PublishContent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func publishContent(
    _ request: Publisher_V1_PublishContentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Publisher_V1_PublishContentRequest, Publisher_V1_PublishContentResponse> {
    return self.makeUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.publishContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishContentInterceptors() ?? []
    )
  }

  /// Revokes and deletes an OAuth2 access token
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeAndDeleteOAuth2Token.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeAndDeleteOAuth2Token(
    _ request: Publisher_V1_RevokeAndDeleteOAuth2TokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Publisher_V1_RevokeAndDeleteOAuth2TokenRequest, Publisher_V1_RevokeAndDeleteOAuth2TokenResponse> {
    return self.makeUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.revokeAndDeleteOAuth2Token.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAndDeleteOAuth2TokenInterceptors() ?? []
    )
  }

  /// RPC for getting the PNBA code
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPNBACode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPNBACode(
    _ request: Publisher_V1_GetPNBACodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Publisher_V1_GetPNBACodeRequest, Publisher_V1_GetPNBACodeResponse> {
    return self.makeUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.getPNBACode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPNBACodeInterceptors() ?? []
    )
  }

  /// RPC for exchanging the PNBA code for a token and storing it
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangePNBACodeAndStore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangePNBACodeAndStore(
    _ request: Publisher_V1_ExchangePNBACodeAndStoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Publisher_V1_ExchangePNBACodeAndStoreRequest, Publisher_V1_ExchangePNBACodeAndStoreResponse> {
    return self.makeUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.exchangePNBACodeAndStore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangePNBACodeAndStoreInterceptors() ?? []
    )
  }

  /// RPC for revoking and deleting a PNBA token
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeAndDeletePNBAToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeAndDeletePNBAToken(
    _ request: Publisher_V1_RevokeAndDeletePNBATokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Publisher_V1_RevokeAndDeletePNBATokenRequest, Publisher_V1_RevokeAndDeletePNBATokenResponse> {
    return self.makeUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.revokeAndDeletePNBAToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAndDeletePNBATokenInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Publisher_V1_PublisherClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Publisher_V1_PublisherNIOClient")
internal final class Publisher_V1_PublisherClient: Publisher_V1_PublisherClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the publisher.v1.Publisher service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Publisher_V1_PublisherNIOClient: Publisher_V1_PublisherClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol?

  /// Creates a client for the publisher.v1.Publisher service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service definition for Publisher
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Publisher_V1_PublisherAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol? { get }

  func makeGetOauth2AuthorizationURLCall(
    _ request: Publisher_V1_GetOAuth2AuthorizationUrlRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Publisher_V1_GetOAuth2AuthorizationUrlRequest, Publisher_V1_GetOAuth2AuthorizationUrlResponse>

  func makeExchangeOauth2CodeAndStoreCall(
    _ request: Publisher_V1_ExchangeOAuth2CodeAndStoreRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Publisher_V1_ExchangeOAuth2CodeAndStoreRequest, Publisher_V1_ExchangeOAuth2CodeAndStoreResponse>

  func makePublishContentCall(
    _ request: Publisher_V1_PublishContentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Publisher_V1_PublishContentRequest, Publisher_V1_PublishContentResponse>

  func makeRevokeAndDeleteOauth2TokenCall(
    _ request: Publisher_V1_RevokeAndDeleteOAuth2TokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Publisher_V1_RevokeAndDeleteOAuth2TokenRequest, Publisher_V1_RevokeAndDeleteOAuth2TokenResponse>

  func makeGetPnbacodeCall(
    _ request: Publisher_V1_GetPNBACodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Publisher_V1_GetPNBACodeRequest, Publisher_V1_GetPNBACodeResponse>

  func makeExchangePnbacodeAndStoreCall(
    _ request: Publisher_V1_ExchangePNBACodeAndStoreRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Publisher_V1_ExchangePNBACodeAndStoreRequest, Publisher_V1_ExchangePNBACodeAndStoreResponse>

  func makeRevokeAndDeletePnbatokenCall(
    _ request: Publisher_V1_RevokeAndDeletePNBATokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Publisher_V1_RevokeAndDeletePNBATokenRequest, Publisher_V1_RevokeAndDeletePNBATokenResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Publisher_V1_PublisherAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Publisher_V1_PublisherClientMetadata.serviceDescriptor
  }

  internal var interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetOauth2AuthorizationURLCall(
    _ request: Publisher_V1_GetOAuth2AuthorizationUrlRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Publisher_V1_GetOAuth2AuthorizationUrlRequest, Publisher_V1_GetOAuth2AuthorizationUrlResponse> {
    return self.makeAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.getOAuth2AuthorizationUrl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOAuth2AuthorizationUrlInterceptors() ?? []
    )
  }

  internal func makeExchangeOauth2CodeAndStoreCall(
    _ request: Publisher_V1_ExchangeOAuth2CodeAndStoreRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Publisher_V1_ExchangeOAuth2CodeAndStoreRequest, Publisher_V1_ExchangeOAuth2CodeAndStoreResponse> {
    return self.makeAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.exchangeOAuth2CodeAndStore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeOAuth2CodeAndStoreInterceptors() ?? []
    )
  }

  internal func makePublishContentCall(
    _ request: Publisher_V1_PublishContentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Publisher_V1_PublishContentRequest, Publisher_V1_PublishContentResponse> {
    return self.makeAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.publishContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishContentInterceptors() ?? []
    )
  }

  internal func makeRevokeAndDeleteOauth2TokenCall(
    _ request: Publisher_V1_RevokeAndDeleteOAuth2TokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Publisher_V1_RevokeAndDeleteOAuth2TokenRequest, Publisher_V1_RevokeAndDeleteOAuth2TokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.revokeAndDeleteOAuth2Token.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAndDeleteOAuth2TokenInterceptors() ?? []
    )
  }

  internal func makeGetPnbacodeCall(
    _ request: Publisher_V1_GetPNBACodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Publisher_V1_GetPNBACodeRequest, Publisher_V1_GetPNBACodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.getPNBACode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPNBACodeInterceptors() ?? []
    )
  }

  internal func makeExchangePnbacodeAndStoreCall(
    _ request: Publisher_V1_ExchangePNBACodeAndStoreRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Publisher_V1_ExchangePNBACodeAndStoreRequest, Publisher_V1_ExchangePNBACodeAndStoreResponse> {
    return self.makeAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.exchangePNBACodeAndStore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangePNBACodeAndStoreInterceptors() ?? []
    )
  }

  internal func makeRevokeAndDeletePnbatokenCall(
    _ request: Publisher_V1_RevokeAndDeletePNBATokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Publisher_V1_RevokeAndDeletePNBATokenRequest, Publisher_V1_RevokeAndDeletePNBATokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.revokeAndDeletePNBAToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAndDeletePNBATokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Publisher_V1_PublisherAsyncClientProtocol {
  internal func getOAuth2AuthorizationUrl(
    _ request: Publisher_V1_GetOAuth2AuthorizationUrlRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Publisher_V1_GetOAuth2AuthorizationUrlResponse {
    return try await self.performAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.getOAuth2AuthorizationUrl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOAuth2AuthorizationUrlInterceptors() ?? []
    )
  }

  internal func exchangeOAuth2CodeAndStore(
    _ request: Publisher_V1_ExchangeOAuth2CodeAndStoreRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Publisher_V1_ExchangeOAuth2CodeAndStoreResponse {
    return try await self.performAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.exchangeOAuth2CodeAndStore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeOAuth2CodeAndStoreInterceptors() ?? []
    )
  }

  internal func publishContent(
    _ request: Publisher_V1_PublishContentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Publisher_V1_PublishContentResponse {
    return try await self.performAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.publishContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishContentInterceptors() ?? []
    )
  }

  internal func revokeAndDeleteOAuth2Token(
    _ request: Publisher_V1_RevokeAndDeleteOAuth2TokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Publisher_V1_RevokeAndDeleteOAuth2TokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.revokeAndDeleteOAuth2Token.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAndDeleteOAuth2TokenInterceptors() ?? []
    )
  }

  internal func getPNBACode(
    _ request: Publisher_V1_GetPNBACodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Publisher_V1_GetPNBACodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.getPNBACode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPNBACodeInterceptors() ?? []
    )
  }

  internal func exchangePNBACodeAndStore(
    _ request: Publisher_V1_ExchangePNBACodeAndStoreRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Publisher_V1_ExchangePNBACodeAndStoreResponse {
    return try await self.performAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.exchangePNBACodeAndStore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangePNBACodeAndStoreInterceptors() ?? []
    )
  }

  internal func revokeAndDeletePNBAToken(
    _ request: Publisher_V1_RevokeAndDeletePNBATokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Publisher_V1_RevokeAndDeletePNBATokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Publisher_V1_PublisherClientMetadata.Methods.revokeAndDeletePNBAToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeAndDeletePNBATokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Publisher_V1_PublisherAsyncClient: Publisher_V1_PublisherAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Publisher_V1_PublisherClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Publisher_V1_PublisherClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getOAuth2AuthorizationUrl'.
  func makeGetOAuth2AuthorizationUrlInterceptors() -> [ClientInterceptor<Publisher_V1_GetOAuth2AuthorizationUrlRequest, Publisher_V1_GetOAuth2AuthorizationUrlResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeOAuth2CodeAndStore'.
  func makeExchangeOAuth2CodeAndStoreInterceptors() -> [ClientInterceptor<Publisher_V1_ExchangeOAuth2CodeAndStoreRequest, Publisher_V1_ExchangeOAuth2CodeAndStoreResponse>]

  /// - Returns: Interceptors to use when invoking 'publishContent'.
  func makePublishContentInterceptors() -> [ClientInterceptor<Publisher_V1_PublishContentRequest, Publisher_V1_PublishContentResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeAndDeleteOAuth2Token'.
  func makeRevokeAndDeleteOAuth2TokenInterceptors() -> [ClientInterceptor<Publisher_V1_RevokeAndDeleteOAuth2TokenRequest, Publisher_V1_RevokeAndDeleteOAuth2TokenResponse>]

  /// - Returns: Interceptors to use when invoking 'getPNBACode'.
  func makeGetPNBACodeInterceptors() -> [ClientInterceptor<Publisher_V1_GetPNBACodeRequest, Publisher_V1_GetPNBACodeResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangePNBACodeAndStore'.
  func makeExchangePNBACodeAndStoreInterceptors() -> [ClientInterceptor<Publisher_V1_ExchangePNBACodeAndStoreRequest, Publisher_V1_ExchangePNBACodeAndStoreResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeAndDeletePNBAToken'.
  func makeRevokeAndDeletePNBATokenInterceptors() -> [ClientInterceptor<Publisher_V1_RevokeAndDeletePNBATokenRequest, Publisher_V1_RevokeAndDeletePNBATokenResponse>]
}

internal enum Publisher_V1_PublisherClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Publisher",
    fullName: "publisher.v1.Publisher",
    methods: [
      Publisher_V1_PublisherClientMetadata.Methods.getOAuth2AuthorizationUrl,
      Publisher_V1_PublisherClientMetadata.Methods.exchangeOAuth2CodeAndStore,
      Publisher_V1_PublisherClientMetadata.Methods.publishContent,
      Publisher_V1_PublisherClientMetadata.Methods.revokeAndDeleteOAuth2Token,
      Publisher_V1_PublisherClientMetadata.Methods.getPNBACode,
      Publisher_V1_PublisherClientMetadata.Methods.exchangePNBACodeAndStore,
      Publisher_V1_PublisherClientMetadata.Methods.revokeAndDeletePNBAToken,
    ]
  )

  internal enum Methods {
    internal static let getOAuth2AuthorizationUrl = GRPCMethodDescriptor(
      name: "GetOAuth2AuthorizationUrl",
      path: "/publisher.v1.Publisher/GetOAuth2AuthorizationUrl",
      type: GRPCCallType.unary
    )

    internal static let exchangeOAuth2CodeAndStore = GRPCMethodDescriptor(
      name: "ExchangeOAuth2CodeAndStore",
      path: "/publisher.v1.Publisher/ExchangeOAuth2CodeAndStore",
      type: GRPCCallType.unary
    )

    internal static let publishContent = GRPCMethodDescriptor(
      name: "PublishContent",
      path: "/publisher.v1.Publisher/PublishContent",
      type: GRPCCallType.unary
    )

    internal static let revokeAndDeleteOAuth2Token = GRPCMethodDescriptor(
      name: "RevokeAndDeleteOAuth2Token",
      path: "/publisher.v1.Publisher/RevokeAndDeleteOAuth2Token",
      type: GRPCCallType.unary
    )

    internal static let getPNBACode = GRPCMethodDescriptor(
      name: "GetPNBACode",
      path: "/publisher.v1.Publisher/GetPNBACode",
      type: GRPCCallType.unary
    )

    internal static let exchangePNBACodeAndStore = GRPCMethodDescriptor(
      name: "ExchangePNBACodeAndStore",
      path: "/publisher.v1.Publisher/ExchangePNBACodeAndStore",
      type: GRPCCallType.unary
    )

    internal static let revokeAndDeletePNBAToken = GRPCMethodDescriptor(
      name: "RevokeAndDeletePNBAToken",
      path: "/publisher.v1.Publisher/RevokeAndDeletePNBAToken",
      type: GRPCCallType.unary
    )
  }
}

/// Service definition for Publisher
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Publisher_V1_PublisherProvider: CallHandlerProvider {
  var interceptors: Publisher_V1_PublisherServerInterceptorFactoryProtocol? { get }

  /// RPC for getting the OAuth2 authorization URL
  func getOAuth2AuthorizationUrl(request: Publisher_V1_GetOAuth2AuthorizationUrlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Publisher_V1_GetOAuth2AuthorizationUrlResponse>

  /// RPC for exchanging OAuth2 authorization code for a token
  func exchangeOAuth2CodeAndStore(request: Publisher_V1_ExchangeOAuth2CodeAndStoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Publisher_V1_ExchangeOAuth2CodeAndStoreResponse>

  /// RPC for publishing content
  func publishContent(request: Publisher_V1_PublishContentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Publisher_V1_PublishContentResponse>

  /// Revokes and deletes an OAuth2 access token
  func revokeAndDeleteOAuth2Token(request: Publisher_V1_RevokeAndDeleteOAuth2TokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Publisher_V1_RevokeAndDeleteOAuth2TokenResponse>

  /// RPC for getting the PNBA code
  func getPNBACode(request: Publisher_V1_GetPNBACodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Publisher_V1_GetPNBACodeResponse>

  /// RPC for exchanging the PNBA code for a token and storing it
  func exchangePNBACodeAndStore(request: Publisher_V1_ExchangePNBACodeAndStoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Publisher_V1_ExchangePNBACodeAndStoreResponse>

  /// RPC for revoking and deleting a PNBA token
  func revokeAndDeletePNBAToken(request: Publisher_V1_RevokeAndDeletePNBATokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Publisher_V1_RevokeAndDeletePNBATokenResponse>
}

extension Publisher_V1_PublisherProvider {
  internal var serviceName: Substring {
    return Publisher_V1_PublisherServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetOAuth2AuthorizationUrl":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_GetOAuth2AuthorizationUrlRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_GetOAuth2AuthorizationUrlResponse>(),
        interceptors: self.interceptors?.makeGetOAuth2AuthorizationUrlInterceptors() ?? [],
        userFunction: self.getOAuth2AuthorizationUrl(request:context:)
      )

    case "ExchangeOAuth2CodeAndStore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_ExchangeOAuth2CodeAndStoreRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_ExchangeOAuth2CodeAndStoreResponse>(),
        interceptors: self.interceptors?.makeExchangeOAuth2CodeAndStoreInterceptors() ?? [],
        userFunction: self.exchangeOAuth2CodeAndStore(request:context:)
      )

    case "PublishContent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_PublishContentRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_PublishContentResponse>(),
        interceptors: self.interceptors?.makePublishContentInterceptors() ?? [],
        userFunction: self.publishContent(request:context:)
      )

    case "RevokeAndDeleteOAuth2Token":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_RevokeAndDeleteOAuth2TokenRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_RevokeAndDeleteOAuth2TokenResponse>(),
        interceptors: self.interceptors?.makeRevokeAndDeleteOAuth2TokenInterceptors() ?? [],
        userFunction: self.revokeAndDeleteOAuth2Token(request:context:)
      )

    case "GetPNBACode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_GetPNBACodeRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_GetPNBACodeResponse>(),
        interceptors: self.interceptors?.makeGetPNBACodeInterceptors() ?? [],
        userFunction: self.getPNBACode(request:context:)
      )

    case "ExchangePNBACodeAndStore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_ExchangePNBACodeAndStoreRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_ExchangePNBACodeAndStoreResponse>(),
        interceptors: self.interceptors?.makeExchangePNBACodeAndStoreInterceptors() ?? [],
        userFunction: self.exchangePNBACodeAndStore(request:context:)
      )

    case "RevokeAndDeletePNBAToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_RevokeAndDeletePNBATokenRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_RevokeAndDeletePNBATokenResponse>(),
        interceptors: self.interceptors?.makeRevokeAndDeletePNBATokenInterceptors() ?? [],
        userFunction: self.revokeAndDeletePNBAToken(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service definition for Publisher
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Publisher_V1_PublisherAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Publisher_V1_PublisherServerInterceptorFactoryProtocol? { get }

  /// RPC for getting the OAuth2 authorization URL
  func getOAuth2AuthorizationUrl(
    request: Publisher_V1_GetOAuth2AuthorizationUrlRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Publisher_V1_GetOAuth2AuthorizationUrlResponse

  /// RPC for exchanging OAuth2 authorization code for a token
  func exchangeOAuth2CodeAndStore(
    request: Publisher_V1_ExchangeOAuth2CodeAndStoreRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Publisher_V1_ExchangeOAuth2CodeAndStoreResponse

  /// RPC for publishing content
  func publishContent(
    request: Publisher_V1_PublishContentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Publisher_V1_PublishContentResponse

  /// Revokes and deletes an OAuth2 access token
  func revokeAndDeleteOAuth2Token(
    request: Publisher_V1_RevokeAndDeleteOAuth2TokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Publisher_V1_RevokeAndDeleteOAuth2TokenResponse

  /// RPC for getting the PNBA code
  func getPNBACode(
    request: Publisher_V1_GetPNBACodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Publisher_V1_GetPNBACodeResponse

  /// RPC for exchanging the PNBA code for a token and storing it
  func exchangePNBACodeAndStore(
    request: Publisher_V1_ExchangePNBACodeAndStoreRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Publisher_V1_ExchangePNBACodeAndStoreResponse

  /// RPC for revoking and deleting a PNBA token
  func revokeAndDeletePNBAToken(
    request: Publisher_V1_RevokeAndDeletePNBATokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Publisher_V1_RevokeAndDeletePNBATokenResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Publisher_V1_PublisherAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Publisher_V1_PublisherServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Publisher_V1_PublisherServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Publisher_V1_PublisherServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetOAuth2AuthorizationUrl":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_GetOAuth2AuthorizationUrlRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_GetOAuth2AuthorizationUrlResponse>(),
        interceptors: self.interceptors?.makeGetOAuth2AuthorizationUrlInterceptors() ?? [],
        wrapping: { try await self.getOAuth2AuthorizationUrl(request: $0, context: $1) }
      )

    case "ExchangeOAuth2CodeAndStore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_ExchangeOAuth2CodeAndStoreRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_ExchangeOAuth2CodeAndStoreResponse>(),
        interceptors: self.interceptors?.makeExchangeOAuth2CodeAndStoreInterceptors() ?? [],
        wrapping: { try await self.exchangeOAuth2CodeAndStore(request: $0, context: $1) }
      )

    case "PublishContent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_PublishContentRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_PublishContentResponse>(),
        interceptors: self.interceptors?.makePublishContentInterceptors() ?? [],
        wrapping: { try await self.publishContent(request: $0, context: $1) }
      )

    case "RevokeAndDeleteOAuth2Token":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_RevokeAndDeleteOAuth2TokenRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_RevokeAndDeleteOAuth2TokenResponse>(),
        interceptors: self.interceptors?.makeRevokeAndDeleteOAuth2TokenInterceptors() ?? [],
        wrapping: { try await self.revokeAndDeleteOAuth2Token(request: $0, context: $1) }
      )

    case "GetPNBACode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_GetPNBACodeRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_GetPNBACodeResponse>(),
        interceptors: self.interceptors?.makeGetPNBACodeInterceptors() ?? [],
        wrapping: { try await self.getPNBACode(request: $0, context: $1) }
      )

    case "ExchangePNBACodeAndStore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_ExchangePNBACodeAndStoreRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_ExchangePNBACodeAndStoreResponse>(),
        interceptors: self.interceptors?.makeExchangePNBACodeAndStoreInterceptors() ?? [],
        wrapping: { try await self.exchangePNBACodeAndStore(request: $0, context: $1) }
      )

    case "RevokeAndDeletePNBAToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Publisher_V1_RevokeAndDeletePNBATokenRequest>(),
        responseSerializer: ProtobufSerializer<Publisher_V1_RevokeAndDeletePNBATokenResponse>(),
        interceptors: self.interceptors?.makeRevokeAndDeletePNBATokenInterceptors() ?? [],
        wrapping: { try await self.revokeAndDeletePNBAToken(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Publisher_V1_PublisherServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getOAuth2AuthorizationUrl'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOAuth2AuthorizationUrlInterceptors() -> [ServerInterceptor<Publisher_V1_GetOAuth2AuthorizationUrlRequest, Publisher_V1_GetOAuth2AuthorizationUrlResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeOAuth2CodeAndStore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeOAuth2CodeAndStoreInterceptors() -> [ServerInterceptor<Publisher_V1_ExchangeOAuth2CodeAndStoreRequest, Publisher_V1_ExchangeOAuth2CodeAndStoreResponse>]

  /// - Returns: Interceptors to use when handling 'publishContent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePublishContentInterceptors() -> [ServerInterceptor<Publisher_V1_PublishContentRequest, Publisher_V1_PublishContentResponse>]

  /// - Returns: Interceptors to use when handling 'revokeAndDeleteOAuth2Token'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeAndDeleteOAuth2TokenInterceptors() -> [ServerInterceptor<Publisher_V1_RevokeAndDeleteOAuth2TokenRequest, Publisher_V1_RevokeAndDeleteOAuth2TokenResponse>]

  /// - Returns: Interceptors to use when handling 'getPNBACode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPNBACodeInterceptors() -> [ServerInterceptor<Publisher_V1_GetPNBACodeRequest, Publisher_V1_GetPNBACodeResponse>]

  /// - Returns: Interceptors to use when handling 'exchangePNBACodeAndStore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangePNBACodeAndStoreInterceptors() -> [ServerInterceptor<Publisher_V1_ExchangePNBACodeAndStoreRequest, Publisher_V1_ExchangePNBACodeAndStoreResponse>]

  /// - Returns: Interceptors to use when handling 'revokeAndDeletePNBAToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeAndDeletePNBATokenInterceptors() -> [ServerInterceptor<Publisher_V1_RevokeAndDeletePNBATokenRequest, Publisher_V1_RevokeAndDeletePNBATokenResponse>]
}

internal enum Publisher_V1_PublisherServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Publisher",
    fullName: "publisher.v1.Publisher",
    methods: [
      Publisher_V1_PublisherServerMetadata.Methods.getOAuth2AuthorizationUrl,
      Publisher_V1_PublisherServerMetadata.Methods.exchangeOAuth2CodeAndStore,
      Publisher_V1_PublisherServerMetadata.Methods.publishContent,
      Publisher_V1_PublisherServerMetadata.Methods.revokeAndDeleteOAuth2Token,
      Publisher_V1_PublisherServerMetadata.Methods.getPNBACode,
      Publisher_V1_PublisherServerMetadata.Methods.exchangePNBACodeAndStore,
      Publisher_V1_PublisherServerMetadata.Methods.revokeAndDeletePNBAToken,
    ]
  )

  internal enum Methods {
    internal static let getOAuth2AuthorizationUrl = GRPCMethodDescriptor(
      name: "GetOAuth2AuthorizationUrl",
      path: "/publisher.v1.Publisher/GetOAuth2AuthorizationUrl",
      type: GRPCCallType.unary
    )

    internal static let exchangeOAuth2CodeAndStore = GRPCMethodDescriptor(
      name: "ExchangeOAuth2CodeAndStore",
      path: "/publisher.v1.Publisher/ExchangeOAuth2CodeAndStore",
      type: GRPCCallType.unary
    )

    internal static let publishContent = GRPCMethodDescriptor(
      name: "PublishContent",
      path: "/publisher.v1.Publisher/PublishContent",
      type: GRPCCallType.unary
    )

    internal static let revokeAndDeleteOAuth2Token = GRPCMethodDescriptor(
      name: "RevokeAndDeleteOAuth2Token",
      path: "/publisher.v1.Publisher/RevokeAndDeleteOAuth2Token",
      type: GRPCCallType.unary
    )

    internal static let getPNBACode = GRPCMethodDescriptor(
      name: "GetPNBACode",
      path: "/publisher.v1.Publisher/GetPNBACode",
      type: GRPCCallType.unary
    )

    internal static let exchangePNBACodeAndStore = GRPCMethodDescriptor(
      name: "ExchangePNBACodeAndStore",
      path: "/publisher.v1.Publisher/ExchangePNBACodeAndStore",
      type: GRPCCallType.unary
    )

    internal static let revokeAndDeletePNBAToken = GRPCMethodDescriptor(
      name: "RevokeAndDeletePNBAToken",
      path: "/publisher.v1.Publisher/RevokeAndDeletePNBAToken",
      type: GRPCCallType.unary
    )
  }
}
