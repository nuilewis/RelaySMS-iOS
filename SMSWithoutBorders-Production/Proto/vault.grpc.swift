//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: vault.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service for managing entities.
///
/// Usage: instantiate `Vault_V1_EntityClient`, then call methods of this protocol to make API calls.
internal protocol Vault_V1_EntityClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol? { get }

  func createEntity(
    _ request: Vault_V1_CreateEntityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vault_V1_CreateEntityRequest, Vault_V1_CreateEntityResponse>

  func authenticateEntity(
    _ request: Vault_V1_AuthenticateEntityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vault_V1_AuthenticateEntityRequest, Vault_V1_AuthenticateEntityResponse>

  func listEntityStoredTokens(
    _ request: Vault_V1_ListEntityStoredTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vault_V1_ListEntityStoredTokenRequest, Vault_V1_ListEntityStoredTokenResponse>

  func storeEntityToken(
    _ request: Vault_V1_StoreEntityTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vault_V1_StoreEntityTokenRequest, Vault_V1_StoreEntityTokenResponse>

  func getEntityAccessToken(
    _ request: Vault_V1_GetEntityAccessTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vault_V1_GetEntityAccessTokenRequest, Vault_V1_GetEntityAccessTokenResponse>

  func decryptPayload(
    _ request: Vault_V1_DecryptPayloadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vault_V1_DecryptPayloadRequest, Vault_V1_DecryptPayloadResponse>

  func encryptPayload(
    _ request: Vault_V1_EncryptPayloadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vault_V1_EncryptPayloadRequest, Vault_V1_EncryptPayloadResponse>

  func updateEntityToken(
    _ request: Vault_V1_UpdateEntityTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vault_V1_UpdateEntityTokenRequest, Vault_V1_UpdateEntityTokenResponse>
}

extension Vault_V1_EntityClientProtocol {
  internal var serviceName: String {
    return "vault.v1.Entity"
  }

  /// Creates an entity.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateEntity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createEntity(
    _ request: Vault_V1_CreateEntityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vault_V1_CreateEntityRequest, Vault_V1_CreateEntityResponse> {
    return self.makeUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.createEntity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEntityInterceptors() ?? []
    )
  }

  /// Authenticates an entity.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthenticateEntity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func authenticateEntity(
    _ request: Vault_V1_AuthenticateEntityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vault_V1_AuthenticateEntityRequest, Vault_V1_AuthenticateEntityResponse> {
    return self.makeUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.authenticateEntity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateEntityInterceptors() ?? []
    )
  }

  /// Lists stored tokens for an entity.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListEntityStoredTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listEntityStoredTokens(
    _ request: Vault_V1_ListEntityStoredTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vault_V1_ListEntityStoredTokenRequest, Vault_V1_ListEntityStoredTokenResponse> {
    return self.makeUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.listEntityStoredTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntityStoredTokensInterceptors() ?? []
    )
  }

  /// Stores a token for an entity.
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreEntityToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func storeEntityToken(
    _ request: Vault_V1_StoreEntityTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vault_V1_StoreEntityTokenRequest, Vault_V1_StoreEntityTokenResponse> {
    return self.makeUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.storeEntityToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreEntityTokenInterceptors() ?? []
    )
  }

  /// Get an entity's access token.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEntityAccessToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEntityAccessToken(
    _ request: Vault_V1_GetEntityAccessTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vault_V1_GetEntityAccessTokenRequest, Vault_V1_GetEntityAccessTokenResponse> {
    return self.makeUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.getEntityAccessToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEntityAccessTokenInterceptors() ?? []
    )
  }

  /// Decrypt payload.
  ///
  /// - Parameters:
  ///   - request: Request to send to DecryptPayload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func decryptPayload(
    _ request: Vault_V1_DecryptPayloadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vault_V1_DecryptPayloadRequest, Vault_V1_DecryptPayloadResponse> {
    return self.makeUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.decryptPayload.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecryptPayloadInterceptors() ?? []
    )
  }

  /// Encrypt payload.
  ///
  /// - Parameters:
  ///   - request: Request to send to EncryptPayload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func encryptPayload(
    _ request: Vault_V1_EncryptPayloadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vault_V1_EncryptPayloadRequest, Vault_V1_EncryptPayloadResponse> {
    return self.makeUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.encryptPayload.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEncryptPayloadInterceptors() ?? []
    )
  }

  /// Updates a token for an entity.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateEntityToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateEntityToken(
    _ request: Vault_V1_UpdateEntityTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vault_V1_UpdateEntityTokenRequest, Vault_V1_UpdateEntityTokenResponse> {
    return self.makeUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.updateEntityToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEntityTokenInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Vault_V1_EntityClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Vault_V1_EntityNIOClient")
internal final class Vault_V1_EntityClient: Vault_V1_EntityClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the vault.v1.Entity service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Vault_V1_EntityNIOClient: Vault_V1_EntityClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol?

  /// Creates a client for the vault.v1.Entity service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service for managing entities.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Vault_V1_EntityAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol? { get }

  func makeCreateEntityCall(
    _ request: Vault_V1_CreateEntityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vault_V1_CreateEntityRequest, Vault_V1_CreateEntityResponse>

  func makeAuthenticateEntityCall(
    _ request: Vault_V1_AuthenticateEntityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vault_V1_AuthenticateEntityRequest, Vault_V1_AuthenticateEntityResponse>

  func makeListEntityStoredTokensCall(
    _ request: Vault_V1_ListEntityStoredTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vault_V1_ListEntityStoredTokenRequest, Vault_V1_ListEntityStoredTokenResponse>

  func makeStoreEntityTokenCall(
    _ request: Vault_V1_StoreEntityTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vault_V1_StoreEntityTokenRequest, Vault_V1_StoreEntityTokenResponse>

  func makeGetEntityAccessTokenCall(
    _ request: Vault_V1_GetEntityAccessTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vault_V1_GetEntityAccessTokenRequest, Vault_V1_GetEntityAccessTokenResponse>

  func makeDecryptPayloadCall(
    _ request: Vault_V1_DecryptPayloadRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vault_V1_DecryptPayloadRequest, Vault_V1_DecryptPayloadResponse>

  func makeEncryptPayloadCall(
    _ request: Vault_V1_EncryptPayloadRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vault_V1_EncryptPayloadRequest, Vault_V1_EncryptPayloadResponse>

  func makeUpdateEntityTokenCall(
    _ request: Vault_V1_UpdateEntityTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vault_V1_UpdateEntityTokenRequest, Vault_V1_UpdateEntityTokenResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vault_V1_EntityAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Vault_V1_EntityClientMetadata.serviceDescriptor
  }

  internal var interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateEntityCall(
    _ request: Vault_V1_CreateEntityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vault_V1_CreateEntityRequest, Vault_V1_CreateEntityResponse> {
    return self.makeAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.createEntity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEntityInterceptors() ?? []
    )
  }

  internal func makeAuthenticateEntityCall(
    _ request: Vault_V1_AuthenticateEntityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vault_V1_AuthenticateEntityRequest, Vault_V1_AuthenticateEntityResponse> {
    return self.makeAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.authenticateEntity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateEntityInterceptors() ?? []
    )
  }

  internal func makeListEntityStoredTokensCall(
    _ request: Vault_V1_ListEntityStoredTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vault_V1_ListEntityStoredTokenRequest, Vault_V1_ListEntityStoredTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.listEntityStoredTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntityStoredTokensInterceptors() ?? []
    )
  }

  internal func makeStoreEntityTokenCall(
    _ request: Vault_V1_StoreEntityTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vault_V1_StoreEntityTokenRequest, Vault_V1_StoreEntityTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.storeEntityToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreEntityTokenInterceptors() ?? []
    )
  }

  internal func makeGetEntityAccessTokenCall(
    _ request: Vault_V1_GetEntityAccessTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vault_V1_GetEntityAccessTokenRequest, Vault_V1_GetEntityAccessTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.getEntityAccessToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEntityAccessTokenInterceptors() ?? []
    )
  }

  internal func makeDecryptPayloadCall(
    _ request: Vault_V1_DecryptPayloadRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vault_V1_DecryptPayloadRequest, Vault_V1_DecryptPayloadResponse> {
    return self.makeAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.decryptPayload.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecryptPayloadInterceptors() ?? []
    )
  }

  internal func makeEncryptPayloadCall(
    _ request: Vault_V1_EncryptPayloadRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vault_V1_EncryptPayloadRequest, Vault_V1_EncryptPayloadResponse> {
    return self.makeAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.encryptPayload.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEncryptPayloadInterceptors() ?? []
    )
  }

  internal func makeUpdateEntityTokenCall(
    _ request: Vault_V1_UpdateEntityTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vault_V1_UpdateEntityTokenRequest, Vault_V1_UpdateEntityTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.updateEntityToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEntityTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vault_V1_EntityAsyncClientProtocol {
  internal func createEntity(
    _ request: Vault_V1_CreateEntityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vault_V1_CreateEntityResponse {
    return try await self.performAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.createEntity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEntityInterceptors() ?? []
    )
  }

  internal func authenticateEntity(
    _ request: Vault_V1_AuthenticateEntityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vault_V1_AuthenticateEntityResponse {
    return try await self.performAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.authenticateEntity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateEntityInterceptors() ?? []
    )
  }

  internal func listEntityStoredTokens(
    _ request: Vault_V1_ListEntityStoredTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vault_V1_ListEntityStoredTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.listEntityStoredTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEntityStoredTokensInterceptors() ?? []
    )
  }

  internal func storeEntityToken(
    _ request: Vault_V1_StoreEntityTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vault_V1_StoreEntityTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.storeEntityToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreEntityTokenInterceptors() ?? []
    )
  }

  internal func getEntityAccessToken(
    _ request: Vault_V1_GetEntityAccessTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vault_V1_GetEntityAccessTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.getEntityAccessToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEntityAccessTokenInterceptors() ?? []
    )
  }

  internal func decryptPayload(
    _ request: Vault_V1_DecryptPayloadRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vault_V1_DecryptPayloadResponse {
    return try await self.performAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.decryptPayload.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDecryptPayloadInterceptors() ?? []
    )
  }

  internal func encryptPayload(
    _ request: Vault_V1_EncryptPayloadRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vault_V1_EncryptPayloadResponse {
    return try await self.performAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.encryptPayload.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEncryptPayloadInterceptors() ?? []
    )
  }

  internal func updateEntityToken(
    _ request: Vault_V1_UpdateEntityTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vault_V1_UpdateEntityTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Vault_V1_EntityClientMetadata.Methods.updateEntityToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEntityTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Vault_V1_EntityAsyncClient: Vault_V1_EntityAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vault_V1_EntityClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Vault_V1_EntityClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createEntity'.
  func makeCreateEntityInterceptors() -> [ClientInterceptor<Vault_V1_CreateEntityRequest, Vault_V1_CreateEntityResponse>]

  /// - Returns: Interceptors to use when invoking 'authenticateEntity'.
  func makeAuthenticateEntityInterceptors() -> [ClientInterceptor<Vault_V1_AuthenticateEntityRequest, Vault_V1_AuthenticateEntityResponse>]

  /// - Returns: Interceptors to use when invoking 'listEntityStoredTokens'.
  func makeListEntityStoredTokensInterceptors() -> [ClientInterceptor<Vault_V1_ListEntityStoredTokenRequest, Vault_V1_ListEntityStoredTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'storeEntityToken'.
  func makeStoreEntityTokenInterceptors() -> [ClientInterceptor<Vault_V1_StoreEntityTokenRequest, Vault_V1_StoreEntityTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'getEntityAccessToken'.
  func makeGetEntityAccessTokenInterceptors() -> [ClientInterceptor<Vault_V1_GetEntityAccessTokenRequest, Vault_V1_GetEntityAccessTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'decryptPayload'.
  func makeDecryptPayloadInterceptors() -> [ClientInterceptor<Vault_V1_DecryptPayloadRequest, Vault_V1_DecryptPayloadResponse>]

  /// - Returns: Interceptors to use when invoking 'encryptPayload'.
  func makeEncryptPayloadInterceptors() -> [ClientInterceptor<Vault_V1_EncryptPayloadRequest, Vault_V1_EncryptPayloadResponse>]

  /// - Returns: Interceptors to use when invoking 'updateEntityToken'.
  func makeUpdateEntityTokenInterceptors() -> [ClientInterceptor<Vault_V1_UpdateEntityTokenRequest, Vault_V1_UpdateEntityTokenResponse>]
}

internal enum Vault_V1_EntityClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Entity",
    fullName: "vault.v1.Entity",
    methods: [
      Vault_V1_EntityClientMetadata.Methods.createEntity,
      Vault_V1_EntityClientMetadata.Methods.authenticateEntity,
      Vault_V1_EntityClientMetadata.Methods.listEntityStoredTokens,
      Vault_V1_EntityClientMetadata.Methods.storeEntityToken,
      Vault_V1_EntityClientMetadata.Methods.getEntityAccessToken,
      Vault_V1_EntityClientMetadata.Methods.decryptPayload,
      Vault_V1_EntityClientMetadata.Methods.encryptPayload,
      Vault_V1_EntityClientMetadata.Methods.updateEntityToken,
    ]
  )

  internal enum Methods {
    internal static let createEntity = GRPCMethodDescriptor(
      name: "CreateEntity",
      path: "/vault.v1.Entity/CreateEntity",
      type: GRPCCallType.unary
    )

    internal static let authenticateEntity = GRPCMethodDescriptor(
      name: "AuthenticateEntity",
      path: "/vault.v1.Entity/AuthenticateEntity",
      type: GRPCCallType.unary
    )

    internal static let listEntityStoredTokens = GRPCMethodDescriptor(
      name: "ListEntityStoredTokens",
      path: "/vault.v1.Entity/ListEntityStoredTokens",
      type: GRPCCallType.unary
    )

    internal static let storeEntityToken = GRPCMethodDescriptor(
      name: "StoreEntityToken",
      path: "/vault.v1.Entity/StoreEntityToken",
      type: GRPCCallType.unary
    )

    internal static let getEntityAccessToken = GRPCMethodDescriptor(
      name: "GetEntityAccessToken",
      path: "/vault.v1.Entity/GetEntityAccessToken",
      type: GRPCCallType.unary
    )

    internal static let decryptPayload = GRPCMethodDescriptor(
      name: "DecryptPayload",
      path: "/vault.v1.Entity/DecryptPayload",
      type: GRPCCallType.unary
    )

    internal static let encryptPayload = GRPCMethodDescriptor(
      name: "EncryptPayload",
      path: "/vault.v1.Entity/EncryptPayload",
      type: GRPCCallType.unary
    )

    internal static let updateEntityToken = GRPCMethodDescriptor(
      name: "UpdateEntityToken",
      path: "/vault.v1.Entity/UpdateEntityToken",
      type: GRPCCallType.unary
    )
  }
}

/// Service for managing entities.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Vault_V1_EntityProvider: CallHandlerProvider {
  var interceptors: Vault_V1_EntityServerInterceptorFactoryProtocol? { get }

  /// Creates an entity.
  func createEntity(request: Vault_V1_CreateEntityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vault_V1_CreateEntityResponse>

  /// Authenticates an entity.
  func authenticateEntity(request: Vault_V1_AuthenticateEntityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vault_V1_AuthenticateEntityResponse>

  /// Lists stored tokens for an entity.
  func listEntityStoredTokens(request: Vault_V1_ListEntityStoredTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vault_V1_ListEntityStoredTokenResponse>

  /// Stores a token for an entity.
  func storeEntityToken(request: Vault_V1_StoreEntityTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vault_V1_StoreEntityTokenResponse>

  /// Get an entity's access token.
  func getEntityAccessToken(request: Vault_V1_GetEntityAccessTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vault_V1_GetEntityAccessTokenResponse>

  /// Decrypt payload.
  func decryptPayload(request: Vault_V1_DecryptPayloadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vault_V1_DecryptPayloadResponse>

  /// Encrypt payload.
  func encryptPayload(request: Vault_V1_EncryptPayloadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vault_V1_EncryptPayloadResponse>

  /// Updates a token for an entity.
  func updateEntityToken(request: Vault_V1_UpdateEntityTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vault_V1_UpdateEntityTokenResponse>
}

extension Vault_V1_EntityProvider {
  internal var serviceName: Substring {
    return Vault_V1_EntityServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateEntity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_CreateEntityRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_CreateEntityResponse>(),
        interceptors: self.interceptors?.makeCreateEntityInterceptors() ?? [],
        userFunction: self.createEntity(request:context:)
      )

    case "AuthenticateEntity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_AuthenticateEntityRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_AuthenticateEntityResponse>(),
        interceptors: self.interceptors?.makeAuthenticateEntityInterceptors() ?? [],
        userFunction: self.authenticateEntity(request:context:)
      )

    case "ListEntityStoredTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_ListEntityStoredTokenRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_ListEntityStoredTokenResponse>(),
        interceptors: self.interceptors?.makeListEntityStoredTokensInterceptors() ?? [],
        userFunction: self.listEntityStoredTokens(request:context:)
      )

    case "StoreEntityToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_StoreEntityTokenRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_StoreEntityTokenResponse>(),
        interceptors: self.interceptors?.makeStoreEntityTokenInterceptors() ?? [],
        userFunction: self.storeEntityToken(request:context:)
      )

    case "GetEntityAccessToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_GetEntityAccessTokenRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_GetEntityAccessTokenResponse>(),
        interceptors: self.interceptors?.makeGetEntityAccessTokenInterceptors() ?? [],
        userFunction: self.getEntityAccessToken(request:context:)
      )

    case "DecryptPayload":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_DecryptPayloadRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_DecryptPayloadResponse>(),
        interceptors: self.interceptors?.makeDecryptPayloadInterceptors() ?? [],
        userFunction: self.decryptPayload(request:context:)
      )

    case "EncryptPayload":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_EncryptPayloadRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_EncryptPayloadResponse>(),
        interceptors: self.interceptors?.makeEncryptPayloadInterceptors() ?? [],
        userFunction: self.encryptPayload(request:context:)
      )

    case "UpdateEntityToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_UpdateEntityTokenRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_UpdateEntityTokenResponse>(),
        interceptors: self.interceptors?.makeUpdateEntityTokenInterceptors() ?? [],
        userFunction: self.updateEntityToken(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service for managing entities.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Vault_V1_EntityAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Vault_V1_EntityServerInterceptorFactoryProtocol? { get }

  /// Creates an entity.
  func createEntity(
    request: Vault_V1_CreateEntityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vault_V1_CreateEntityResponse

  /// Authenticates an entity.
  func authenticateEntity(
    request: Vault_V1_AuthenticateEntityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vault_V1_AuthenticateEntityResponse

  /// Lists stored tokens for an entity.
  func listEntityStoredTokens(
    request: Vault_V1_ListEntityStoredTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vault_V1_ListEntityStoredTokenResponse

  /// Stores a token for an entity.
  func storeEntityToken(
    request: Vault_V1_StoreEntityTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vault_V1_StoreEntityTokenResponse

  /// Get an entity's access token.
  func getEntityAccessToken(
    request: Vault_V1_GetEntityAccessTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vault_V1_GetEntityAccessTokenResponse

  /// Decrypt payload.
  func decryptPayload(
    request: Vault_V1_DecryptPayloadRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vault_V1_DecryptPayloadResponse

  /// Encrypt payload.
  func encryptPayload(
    request: Vault_V1_EncryptPayloadRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vault_V1_EncryptPayloadResponse

  /// Updates a token for an entity.
  func updateEntityToken(
    request: Vault_V1_UpdateEntityTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vault_V1_UpdateEntityTokenResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vault_V1_EntityAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Vault_V1_EntityServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Vault_V1_EntityServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Vault_V1_EntityServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateEntity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_CreateEntityRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_CreateEntityResponse>(),
        interceptors: self.interceptors?.makeCreateEntityInterceptors() ?? [],
        wrapping: { try await self.createEntity(request: $0, context: $1) }
      )

    case "AuthenticateEntity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_AuthenticateEntityRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_AuthenticateEntityResponse>(),
        interceptors: self.interceptors?.makeAuthenticateEntityInterceptors() ?? [],
        wrapping: { try await self.authenticateEntity(request: $0, context: $1) }
      )

    case "ListEntityStoredTokens":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_ListEntityStoredTokenRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_ListEntityStoredTokenResponse>(),
        interceptors: self.interceptors?.makeListEntityStoredTokensInterceptors() ?? [],
        wrapping: { try await self.listEntityStoredTokens(request: $0, context: $1) }
      )

    case "StoreEntityToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_StoreEntityTokenRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_StoreEntityTokenResponse>(),
        interceptors: self.interceptors?.makeStoreEntityTokenInterceptors() ?? [],
        wrapping: { try await self.storeEntityToken(request: $0, context: $1) }
      )

    case "GetEntityAccessToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_GetEntityAccessTokenRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_GetEntityAccessTokenResponse>(),
        interceptors: self.interceptors?.makeGetEntityAccessTokenInterceptors() ?? [],
        wrapping: { try await self.getEntityAccessToken(request: $0, context: $1) }
      )

    case "DecryptPayload":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_DecryptPayloadRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_DecryptPayloadResponse>(),
        interceptors: self.interceptors?.makeDecryptPayloadInterceptors() ?? [],
        wrapping: { try await self.decryptPayload(request: $0, context: $1) }
      )

    case "EncryptPayload":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_EncryptPayloadRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_EncryptPayloadResponse>(),
        interceptors: self.interceptors?.makeEncryptPayloadInterceptors() ?? [],
        wrapping: { try await self.encryptPayload(request: $0, context: $1) }
      )

    case "UpdateEntityToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vault_V1_UpdateEntityTokenRequest>(),
        responseSerializer: ProtobufSerializer<Vault_V1_UpdateEntityTokenResponse>(),
        interceptors: self.interceptors?.makeUpdateEntityTokenInterceptors() ?? [],
        wrapping: { try await self.updateEntityToken(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Vault_V1_EntityServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createEntity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateEntityInterceptors() -> [ServerInterceptor<Vault_V1_CreateEntityRequest, Vault_V1_CreateEntityResponse>]

  /// - Returns: Interceptors to use when handling 'authenticateEntity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateEntityInterceptors() -> [ServerInterceptor<Vault_V1_AuthenticateEntityRequest, Vault_V1_AuthenticateEntityResponse>]

  /// - Returns: Interceptors to use when handling 'listEntityStoredTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListEntityStoredTokensInterceptors() -> [ServerInterceptor<Vault_V1_ListEntityStoredTokenRequest, Vault_V1_ListEntityStoredTokenResponse>]

  /// - Returns: Interceptors to use when handling 'storeEntityToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreEntityTokenInterceptors() -> [ServerInterceptor<Vault_V1_StoreEntityTokenRequest, Vault_V1_StoreEntityTokenResponse>]

  /// - Returns: Interceptors to use when handling 'getEntityAccessToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEntityAccessTokenInterceptors() -> [ServerInterceptor<Vault_V1_GetEntityAccessTokenRequest, Vault_V1_GetEntityAccessTokenResponse>]

  /// - Returns: Interceptors to use when handling 'decryptPayload'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDecryptPayloadInterceptors() -> [ServerInterceptor<Vault_V1_DecryptPayloadRequest, Vault_V1_DecryptPayloadResponse>]

  /// - Returns: Interceptors to use when handling 'encryptPayload'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEncryptPayloadInterceptors() -> [ServerInterceptor<Vault_V1_EncryptPayloadRequest, Vault_V1_EncryptPayloadResponse>]

  /// - Returns: Interceptors to use when handling 'updateEntityToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateEntityTokenInterceptors() -> [ServerInterceptor<Vault_V1_UpdateEntityTokenRequest, Vault_V1_UpdateEntityTokenResponse>]
}

internal enum Vault_V1_EntityServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Entity",
    fullName: "vault.v1.Entity",
    methods: [
      Vault_V1_EntityServerMetadata.Methods.createEntity,
      Vault_V1_EntityServerMetadata.Methods.authenticateEntity,
      Vault_V1_EntityServerMetadata.Methods.listEntityStoredTokens,
      Vault_V1_EntityServerMetadata.Methods.storeEntityToken,
      Vault_V1_EntityServerMetadata.Methods.getEntityAccessToken,
      Vault_V1_EntityServerMetadata.Methods.decryptPayload,
      Vault_V1_EntityServerMetadata.Methods.encryptPayload,
      Vault_V1_EntityServerMetadata.Methods.updateEntityToken,
    ]
  )

  internal enum Methods {
    internal static let createEntity = GRPCMethodDescriptor(
      name: "CreateEntity",
      path: "/vault.v1.Entity/CreateEntity",
      type: GRPCCallType.unary
    )

    internal static let authenticateEntity = GRPCMethodDescriptor(
      name: "AuthenticateEntity",
      path: "/vault.v1.Entity/AuthenticateEntity",
      type: GRPCCallType.unary
    )

    internal static let listEntityStoredTokens = GRPCMethodDescriptor(
      name: "ListEntityStoredTokens",
      path: "/vault.v1.Entity/ListEntityStoredTokens",
      type: GRPCCallType.unary
    )

    internal static let storeEntityToken = GRPCMethodDescriptor(
      name: "StoreEntityToken",
      path: "/vault.v1.Entity/StoreEntityToken",
      type: GRPCCallType.unary
    )

    internal static let getEntityAccessToken = GRPCMethodDescriptor(
      name: "GetEntityAccessToken",
      path: "/vault.v1.Entity/GetEntityAccessToken",
      type: GRPCCallType.unary
    )

    internal static let decryptPayload = GRPCMethodDescriptor(
      name: "DecryptPayload",
      path: "/vault.v1.Entity/DecryptPayload",
      type: GRPCCallType.unary
    )

    internal static let encryptPayload = GRPCMethodDescriptor(
      name: "EncryptPayload",
      path: "/vault.v1.Entity/EncryptPayload",
      type: GRPCCallType.unary
    )

    internal static let updateEntityToken = GRPCMethodDescriptor(
      name: "UpdateEntityToken",
      path: "/vault.v1.Entity/UpdateEntityToken",
      type: GRPCCallType.unary
    )
  }
}
